import time
import telebot
from telebot import types
import threading
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

from langchain.schema import HumanMessage, SystemMessage
from langchain.chat_models.gigachat import GigaChat

KEY = ('')
bot = telebot.TeleBot(KEY)

# Initialize GigaChat
chat = GigaChat(credentials="", verify_ssl_certs=False)

user_summary_length = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start_button"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞! üìö‚ú®\n"
                                      "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å GigaChat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
                                      reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "start_button")
def next(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    bot.send_message(call.message.chat.id,
                     "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
                     "1. –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å' –Ω–∏–∂–µ. ‚ñ∂Ô∏è\n"
                     "2. –í—ã–±–æ—Ä –¥–ª–∏–Ω—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å' –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:\n"
                     "   - –ö—Ä–∞—Ç–∫–∞—è: –î–ª—è —Å–∞–º—ã—Ö –∫—Ä–∞—Ç–∫–∏—Ö –æ–±–∑–æ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 20 —Å–ª–æ–≤). ‚ú®\n"
                     "   - –°—Ä–µ–¥–Ω—è—è: –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–æ 50 —Å–ª–æ–≤). üåü\n"
                     "   - –ü–æ–¥—Ä–æ–±–Ω–∞—è: –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–æ 100 —Å–ª–æ–≤). üå†\n"
                     "3. –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å. üñäÔ∏è\n"
                     "4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é. ‚è≥\n\n"
                     "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 600 —Å–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏. ‚ö†Ô∏è\n\n"
                     "–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "next")
def start_summary_process(call):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö—Ä–∞—Ç–∫–∞—è")
    btn2 = types.KeyboardButton("–°—Ä–µ–¥–Ω—è—è")
    btn3 = types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è")
    markup.add(btn1, btn2, btn3)
    bot.send_message(call.message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: –ö—Ä–∞—Ç–∫–∞—è, –°—Ä–µ–¥–Ω—è—è –∏–ª–∏ –ü–æ–¥—Ä–æ–±–Ω–∞—è.',
                     reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–ö—Ä–∞—Ç–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ü–æ–¥—Ä–æ–±–Ω–∞—è"])
def set_summary_length(message):
    if message.text == "–ö—Ä–∞—Ç–∫–∞—è":
        user_summary_length[message.chat.id] = 20
    elif message.text == "–°—Ä–µ–¥–Ω—è—è":
        user_summary_length[message.chat.id] = 50
    elif message.text == "–ü–æ–¥—Ä–æ–±–Ω–∞—è":
        user_summary_length[message.chat.id] = 100
    bot.send_message(message.chat.id,
                     f'–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {message.text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.',
                     reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(content_types=['text'])
def answer(message):
    if message.chat.id not in user_summary_length:
        bot.send_message(message.chat.id,
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã: –ö—Ä–∞—Ç–∫–∞—è, –°—Ä–µ–¥–Ω—è—è –∏–ª–∏ –ü–æ–¥—Ä–æ–±–Ω–∞—è.')
        return

    bot.send_message(message.chat.id, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...')
    article_text = message.text
    summary_length = user_summary_length[message.chat.id]

    def generate_summary():
        nonlocal article_text, summary_length, message
        progress_message = bot.send_message(message.chat.id, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏...')
        for i in range(10):
            time.sleep(1)
            bot.edit_message_text(chat_id=message.chat.id, message_id=progress_message.message_id,
                                  text=f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏... {i * 10}%')

        messages = [
            SystemMessage(
                content=f"–¢—ã —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ—à—å —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ {summary_length}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ–≥–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É —Å–ª–æ–≤."
            ),
            HumanMessage(content=article_text),
        ]

        response = chat.invoke(messages)
        summary = response.content

        bot.send_message(message.chat.id, summary)
        do_again(message)

    threading.Thread(target=generate_summary).start()

def do_again(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö—Ä–∞—Ç–∫–∞—è")
    btn2 = types.KeyboardButton("–°—Ä–µ–¥–Ω—è—è")
    btn3 = types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id,
                     '–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç? –í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: –ö—Ä–∞—Ç–∫–∞—è, –°—Ä–µ–¥–Ω—è—è –∏–ª–∏ –ü–æ–¥—Ä–æ–±–Ω–∞—è.',
                     reply_markup=markup)

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
